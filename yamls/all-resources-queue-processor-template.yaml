---
# Source: aws-node-termination-handler/templates/psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: aws-node-termination-handler
  labels:
    app.kubernetes.io/name: aws-node-termination-handler
    app.kubernetes.io/instance: aws-node-termination-handler
    app.kubernetes.io/version: "1.17.3"
    app.kubernetes.io/part-of: aws-node-termination-handler
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  privileged: false
  hostIPC: false
  hostNetwork: true
  hostPID: false
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  allowedCapabilities:
    - '*'
  fsGroup:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
    - '*'
---
# Source: aws-node-termination-handler/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-node-termination-handler
  namespace: kube-system
  labels:
    app.kubernetes.io/name: aws-node-termination-handler
    app.kubernetes.io/instance: aws-node-termination-handler
    app.kubernetes.io/version: "1.17.3"
    app.kubernetes.io/part-of: aws-node-termination-handler
---
# Source: aws-node-termination-handler/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: aws-node-termination-handler
  labels:
    app.kubernetes.io/name: aws-node-termination-handler
    app.kubernetes.io/instance: aws-node-termination-handler
    app.kubernetes.io/version: "1.17.3"
    app.kubernetes.io/part-of: aws-node-termination-handler
rules:
- apiGroups:
    - ""
  resources:
    - nodes
  verbs:
    - get
    - list
    - patch
    - update
- apiGroups:
    - ""
  resources:
    - pods
  verbs:
    - list
    - get
- apiGroups:
    - ""
  resources:
    - pods/eviction
  verbs:
    - create
- apiGroups:
    - extensions
  resources:
    - daemonsets
  verbs:
    - get
- apiGroups:
    - apps
  resources:
    - daemonsets
  verbs:
    - get
---
# Source: aws-node-termination-handler/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: aws-node-termination-handler
  labels:
    app.kubernetes.io/name: aws-node-termination-handler
    app.kubernetes.io/instance: aws-node-termination-handler
    app.kubernetes.io/version: "1.17.3"
    app.kubernetes.io/part-of: aws-node-termination-handler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aws-node-termination-handler
subjects:
  - kind: ServiceAccount
    name: aws-node-termination-handler
    namespace: kube-system
---
# Source: aws-node-termination-handler/templates/psp.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aws-node-termination-handler-psp
  namespace: kube-system
  labels:
    app.kubernetes.io/name: aws-node-termination-handler
    app.kubernetes.io/instance: aws-node-termination-handler
    app.kubernetes.io/version: "1.17.3"
    app.kubernetes.io/part-of: aws-node-termination-handler
rules:
  - apiGroups: ['policy']
    resources: ['podsecuritypolicies']
    verbs:     ['use']
    resourceNames:
      - aws-node-termination-handler
---
# Source: aws-node-termination-handler/templates/psp.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aws-node-termination-handler-psp
  namespace: kube-system
  labels:
    app.kubernetes.io/name: aws-node-termination-handler
    app.kubernetes.io/instance: aws-node-termination-handler
    app.kubernetes.io/version: "1.17.3"
    app.kubernetes.io/part-of: aws-node-termination-handler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: aws-node-termination-handler-psp
subjects:
  - kind: ServiceAccount
    name: aws-node-termination-handler
    namespace: kube-system
---
# Source: aws-node-termination-handler/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aws-node-termination-handler
  namespace: kube-system
  labels:
    app.kubernetes.io/name: aws-node-termination-handler
    app.kubernetes.io/instance: aws-node-termination-handler
    app.kubernetes.io/version: "1.17.3"
    app.kubernetes.io/part-of: aws-node-termination-handler
    app.kubernetes.io/component: deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: aws-node-termination-handler
      app.kubernetes.io/instance: aws-node-termination-handler
      app.kubernetes.io/component: deployment
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aws-node-termination-handler
        app.kubernetes.io/instance: aws-node-termination-handler
        app.kubernetes.io/component: deployment
        k8s-app: aws-node-termination-handler
    spec:
      serviceAccountName: aws-node-termination-handler
      securityContext:
        fsGroup: 1000
      priorityClassName: system-cluster-critical
      containers:
        - name: aws-node-termination-handler
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          image: public.ecr.aws/aws-ec2/aws-node-termination-handler:v1.17.3
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ENABLE_PROBES_SERVER
              value: "true"
            - name: PROBES_SERVER_PORT
              value: "8080"
            - name: PROBES_SERVER_ENDPOINT
              value: "/healthz"
            - name: LOG_LEVEL
              value: "info"
            - name: JSON_LOGGING
              value: "false"
            - name: ENABLE_PROMETHEUS_SERVER
              value: "false"
            - name: PROMETHEUS_SERVER_PORT
              value: "9092"
            # [DEPRECATED] Use CHECK_TAG_BEFORE_DRAINING instead
            - name: CHECK_ASG_TAG_BEFORE_DRAINING
              value: "true"
            - name: CHECK_TAG_BEFORE_DRAINING
              value: "true"
            # [DEPRECATED] Use MANAGED_TAG instead
            - name: MANAGED_ASG_TAG
              value: "aws-node-termination-handler/managed"
            - name: MANAGED_TAG
              value: "aws-node-termination-handler/managed"
            - name: USE_PROVIDER_ID
              value: "false"
            - name: DRY_RUN
              value: "false"
            - name: CORDON_ONLY
              value: "false"
            - name: TAINT_NODE
              value: "false"
            - name: EXCLUDE_FROM_LOAD_BALANCERS
              value: "false"
            - name: DELETE_LOCAL_DATA
              value: "true"
            - name: IGNORE_DAEMON_SETS
              value: "true"
            - name: POD_TERMINATION_GRACE_PERIOD
              value: "-1"
            - name: NODE_TERMINATION_GRACE_PERIOD
              value: "120"
            - name: EMIT_KUBERNETES_EVENTS
              value: "false"
            - name: COMPLETE_LIFECYCLE_ACTION_DELAY_SECONDS
              value: "-1"
            - name: ENABLE_SPOT_INTERRUPTION_DRAINING
              value: "true"
            - name: ENABLE_SCHEDULED_EVENT_DRAINING
              value: "false"
            - name: ENABLE_REBALANCE_MONITORING
              value: "false"
            - name: ENABLE_REBALANCE_DRAINING
              value: "false"
            - name: ENABLE_SQS_TERMINATION_DRAINING
              value: "true"
            - name: "QUEUE_URL"
              value: "https://sqs.$AWS_REGION.amazonaws.com/$ACCOUNT_ID/$SQS_QUEUE_NAME"
            - name: WORKERS
              value: "10"
          ports:
           - name: liveness-probe
             protocol: TCP
             containerPort: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
      nodeSelector:
        kubernetes.io/os: linux
